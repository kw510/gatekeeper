syntax = "proto3";

package gk.v1;

import "gk/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service Gatekeeper {
	rpc CheckRbac(CheckRbacRequest) returns (CheckRbacResponse) {
		option (google.api.http) = {
			post : "/v1/rbac:check"
			body : "*"
		};
	}

	// Collections
	rpc CreateCollection(CreateCollectionRequest) returns (Collection) {
		option (google.api.http) = {
			post : "/v1/collections"
			body : "*"
		};
	}

	rpc RetrieveCollection(RetrieveCollectionRequest) returns (Collection) {
		option (google.api.http) = {
			get : "/v1/collections/{id}"
		};
	}

	rpc UpdateCollection(UpdateCollectionRequest) returns (Collection) {
		option (google.api.http) = {
			patch : "/v1/collections/{id}"
			body : "*"
		};
	}

	// Collections - members
	rpc AddCollectionMember(AddCollectionMemberRequest) returns (AddCollectionMemberResponse) {
		option (google.api.http) = {
			post : "/v1/collections/{collection_id}/members"
			body : "*"
		};
	}

	rpc ListCollectionMembers(ListCollectionMembersRequest) returns (ListCollectionMembersResponse) {
		option (google.api.http) = {
			get : "/v1/collections/{id}/members?_limit={page.limit}&_offset={page.offset}"
		};
	}

	rpc RemoveCollectionMember(RemoveCollectionMemberRequest) returns (RemoveCollectionMemberResponse) {
		option (google.api.http) = {
			delete : "/v1/collections/{collection_id}/members/{identity_id}"
		};
	}

	// Identities
	rpc CreateIdentity(CreateIdentityRequest) returns (Identity) {
		option (google.api.http) = {
			post : "/v1/identities"
			body : "*"
		};
	}

	rpc RetrieveIdentity(RetrieveIdentityRequest) returns (Identity) {
		option (google.api.http) = {
			get : "/v1/identities/{id}"
		};
	}

	rpc UpdateIdentity(UpdateIdentityRequest) returns (Identity) {
		option (google.api.http) = {
			patch : "/v1/identities/{id}"
			body : "*"
		};
	}

	// RBAC policies
	rpc CreateRbacPolicy(CreateRbacPolicyRequest) returns (RbacPolicy) {
		option (google.api.http) = {
			post : "/v1/rbac-policies"
			body : "*"
		};
	}
}

// Collections
message Collection {
	string id   = 1;
	string name = 2;
}

message CreateCollectionRequest {
	optional string id   = 1;
	string          name = 2;
}

message RetrieveCollectionRequest {
	string id = 1;
}

message UpdateCollectionRequest {
	string          id   = 1;
	optional string name = 2;
}

// Collections - members
message AddCollectionMemberRequest {
	string collection_id = 1;
	string identity_id   = 2;
}

message AddCollectionMemberResponse {}

message ListCollectionMembersRequest {
	string id = 1;

	optional Page page = 2;
}

message ListCollectionMembersResponse {
	repeated Identity data = 1;
	Meta              meta = 2;
}

message RemoveCollectionMemberRequest {
	string collection_id = 1;
	string identity_id   = 2;
}

message RemoveCollectionMemberResponse {}

// Identities
message Identity {
	string id  = 1;
	string sub = 2;

	optional google.protobuf.Struct attrs = 3;
}

message CreateIdentityRequest {
	optional string id  = 1;
	string          sub = 2;

	optional google.protobuf.Struct attrs = 3;
}

message RetrieveIdentityRequest {
	oneof identity {
		string id  = 1;
		string sub = 2;
	}
}

message UpdateIdentityRequest {
	string id = 1;

	optional string sub                   = 2;
	optional google.protobuf.Struct attrs = 3;
}

// RBAC policies
message RbacPolicy {
	string          id   = 1;
	optional string name = 2;

	repeated string         collection_ids = 3;
	repeated string         identity_ids   = 4;
	repeated RbacPolicyRule rules          = 5;
}

message RbacPolicyRule {
	google.protobuf.Struct attrs   = 2;
	string                 role_id = 1;
}

message CheckRbacRequest {
	oneof identity {
		string identity_id  = 1;
		string identity_sub = 2;
	}

	string permission = 3;
}

message CheckRbacResponse {
	repeated Policy policies = 1;
}

message CreateRbacPolicyRequest {
	optional string id   = 1;
	optional string name = 2;

	repeated string         collection_ids = 3;
	repeated string         identity_ids   = 4;
	repeated RbacPolicyRule rules          = 5;
}
